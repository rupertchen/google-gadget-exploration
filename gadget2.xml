<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs
            title="Meeting Cost"
            description="Gives a $ valuation of upcoming meetings"
            author="Rupert Chen"
            author_email="rupert.chen@gmail.com">
        <Require feature="dynamic-height"/>
        <Require feature="google.calendar-0.5"/>
        <Require feature="google.calendar-0.5.read"/>
    </ModulePrefs>
    <UserPref name="Name" display_name="Your Name" default_value="World"/>
    <Content type="html">
        <![CDATA[
        <script>
            // TODO: should all the globals be ALL_CAPS?

            /**
             * The set of preferences
             *
             * @type {Object}
             */
            var PREFS;

            /**
             * Time of next refresh as ms since 1 January 1970 00:00:00 UTC
             *
             * @type {number}
             */
            var nextRefreshTime = 0;

            /**
             * Identifier of the repeated redraw action
             */
            var redrawIntervalId;

            /**
             * Minutes between data fetches
             *
             * @type {number}
             */
            var refetchPeriod = 10;

            /**
             * Upcoming events
             *
             * @type {Array}
             */
            var UPCOMING_EVENTS = [];

            function getUpcomingEvents() {
                // TODO: implement
                console.log('getUpcomingEvents');

                // Set interval to be 7 days
                var start = new Date();
                var end = new Date();
                end.setDate(start.getDate() + 7);

                // "@viewer" is a special value to see the current user's events
                // "selected" is a special value to see the set of calendars that are visible and checked
                google.calendar.read.getEvents(
                        upcomingEventsCallback, '@viewer',
                        google.calendar.utils.fromDate(start, PREFS.timeOffset),
                        google.calendar.utils.fromDate(end, PREFS.timeOffset),
                        {'requestedFields': ['status', 'attendeeCount', 'attendees']})
            }

            function upcomingEventsCallback(events) {
                console.log(events);
                if (events && events.length > 0) {
                    UPCOMING_EVENTS = events[0].events;
                } else {
                    UPCOMING_EVENTS = [];
                }
                drawScreen();
            }

            function drawScreen() {
                console.log('drawScreen');
                var main = document.getElementById('main');

                var list_items = [];
                var numEvents = UPCOMING_EVENTS.length;
                for (var i = 0; i < numEvents; i++) {
                    console.log('render list?');
                    var event = UPCOMING_EVENTS[i];
                    if (event.allDay || event.status === 'declined') {
                        console.log('nope');
                        continue;
                    }
                    console.log('yep');
                    // "???" currently used for missing titles
                    list_items.push('<li>' + gadgets.util.escapeString(event.title || '???') + '</li>');
                }

                var html;
                if (list_items.length > 0){
                    html = '<ul>' + list_items.join('') + '</ul>';
                } else {
                    html = 'No upcoming events';
                }
                main.innerHTML = html;
                gadgets.window.adjustHeight();
            }

            function redrawPeriodically() {
                var now = Date.now();
                // TODO: determine whether this is necessary if we are subscribed to data changes
                // if this i removed, then just have to fire off the initial fetch manually in init()
                if (nextRefreshTime <= now) {
                    nextRefreshTime = now + (refetchPeriod * 60000);
                    getUpcomingEvents();
                }

                drawScreen();
                redrawIntervalId = window.setInterval(drawScreen, 60000);
            }
        </script>
        <div id=main>Loading...</div>
        <script>
            /**
             * Initialize the gadget
             *
             * @param {Object} prefs The set of preferences.
             */
            function init(prefs) {
                PREFS = prefs;

                google.calendar.subscribeToDataChange(getUpcomingEvents);
                redrawPeriodically();
            }

            google.calendar.getPreferences(init);
        </script>
        ]]>
    </Content>
</Module>
